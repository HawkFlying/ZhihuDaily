apply plugin: 'com.android.application'
apply from: '../buildSystem/tinker.gradle'

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : rootProject.ext.androidVersionConfig.versionCode
}

android {
    def cfg = rootProject.ext.androidVersionConfig

    compileSdkVersion cfg.androidCompileSdkVersion
    buildToolsVersion cfg.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion cfg.androidMinSdkVersion
        targetSdkVersion cfg.androidTargetSdkVersion
        versionCode cfg.versionCode as int
        versionName cfg.versionName


        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement*/
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch*/
        //        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
        //        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!*/
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.javaSourceCompatibility as JavaVersion
        targetCompatibility rootProject.ext.javaTargetCompatibility as JavaVersion
    }

    //    resourcePrefix "app_"

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.support.appcompat as String
    implementation rootProject.ext.majorFrame.ButterKnife as String
    annotationProcessor rootProject.ext.majorFrame.aptButterKnifeCompiler as String

    implementation project(':module_service')
    implementation project(':module_common:lib_common')

    if (isRunAlone.toBoolean()) {
        //
    } else {
        implementation project(':component_daily')
        implementation project(':component_gank')
        implementation project(':component_setting')
    }
}
